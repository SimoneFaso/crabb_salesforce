<apex:page controller="UploadDataTosObject" extensions="FileEsitiUploadController" standardStylesheets="false"
           sidebar="false">

    <apex:stylesheet value="{!URLFOR($Resource.crabbresponsive, '/crabb_responsive/bootstrap502/css/bootstrapcrabb.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.crabbresponsive, '/crabb_responsive/bootstrap502/css/bootstrap.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.crabbresponsive, '/crabb_responsive/bootstrap502/css/bootstrap-themecrabb.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.crabbresponsive, '/crabb_responsive/bootstrap502/css/bootstrap.min.css')}"/>
    <!--<apex:includeScript value="{!URLFOR($Resource.jQuery, '/jquery-ui-1.10.4.custom/js/jquery-1.10.2.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.jQuery, '/jquery-ui-1.10.4.custom/js/jquery-ui-1.10.4.custom.min.js')}"/> -->
    <apex:includeScript value="{!URLFOR($Resource.crabbresponsive, '/crabb_responsive/jquery351/jquery.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.crabbresponsive, '/crabb_responsive/bootstrap502/js/bootstrap.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.crabbresponsive, '/crabb_responsive/bootstrap502/js/bootstrap.min.js')}"/>
    
    <apex:includeScript value="{!URLFOR($Resource.jQueryNew, '/jquery-ui-1.13.2/external/jquery/jquery.js')}"  />
    <apex:includeScript value="{!URLFOR($Resource.jQueryNew, '/jquery-ui-1.13.2/jquery-ui.min.js')}"  />
    <apex:stylesheet value="{!URLFOR($Resource.jQueryNew, '/jquery-ui-1.13.2/jquery-ui.min.css')}"  />
    <apex:includeScript value="{!URLFOR($Resource.jQueryNew, '/jquery-ui-1.13.2/jquery-ui.js')}"  />
    <apex:stylesheet value="{!URLFOR($Resource.jQueryNew, '/jquery-ui-1.13.2/jquery-ui.css')}"  />
    <apex:stylesheet value="{!URLFOR($Resource.jQueryNew, '/jquery-ui-1.13.2/jquery-ui.theme.min.css')}"  />
    <apex:stylesheet value="{!URLFOR($Resource.jQueryNew, '/jquery-ui-1.13.2/jquery-ui.theme.css')}"  />
    <apex:stylesheet value="{!URLFOR($Resource.jQueryNew, '/jquery-ui-1.13.2/jquery-ui.structure.min.css')}"  />
    <apex:stylesheet value="{!URLFOR($Resource.jQueryNew, '/jquery-ui-1.13.2/jquery-ui.structure.css')}"  />
    <!--<apex:includeScript value="{!URLFOR($Resource.jQuery, '/jquery-ui-1.13.0/external/jquery/jquery.js')}"  />
    <apex:includeScript value="{!URLFOR($Resource.jQuery, '/jquery-ui-1.13.0/jquery-ui.min.js')}"  />
    <apex:stylesheet value="{!URLFOR($Resource.jQuery, '/jquery-ui-1.13.0/jquery-ui.min.css')}"  />
    <apex:includeScript value="{!URLFOR($Resource.jQuery, '/jquery-ui-1.13.0/jquery-ui.js')}"  />
    <apex:stylesheet value="{!URLFOR($Resource.jQuery, '/jquery-ui-1.13.0/jquery-ui.theme.min.css')}"  />
    <apex:stylesheet value="{!URLFOR($Resource.jQuery, '/jquery-ui-1.13.0/jquery-ui.theme.css')}"  />
    <apex:stylesheet value="{!URLFOR($Resource.jQuery, '/jquery-ui-1.13.0/jquery-ui.structure.min.css')}"  />
    <apex:stylesheet value="{!URLFOR($Resource.jQuery, '/jquery-ui-1.13.0/jquery-ui.structure.css')}"  />-->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css"> </link>


    <style>
        [hidden], template{
            display:block !important;
        }

        .custom-container {
            padding: 8px;
        }

        form .uploadBox {
            width: auto;
            min-height: 50px;
        }

        form .drop {
            width: auto;
            margin: 8px;
            padding: 8px 0px;
        }

        .crabbpackage {
            text-align: center;
            margin: 8px;
            padding: 8px 0px;
        }

        .btnCustom{
            width: 60px;
        }

        form .table-responsive {
            border: none;
        }

        .pbHeader, .bPageBlock {
            border: none !important;
        }

        .panel-body {
            margin: 8px;
            padding: 0px 0px 8px 0px;
        }

        .uploadBox .upload, .uploadBox .upload_complete {
            background-color: white;
            border: 1px solid #CACACA;
            border-radius: 3px 3px 3px 3px;
            margin: 8px;
            padding: 8px;
        }

        .loading-spinner-background {
            position: fixed;
            z-index: 999;
            height: 2em;
            width: 2em;
            overflow: visible;
            margin: auto;
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
        }

        .loading-spinner-background:before {
            content: '';
            display: block;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.3);
        }

        #loading-spinner.spinner {
            left: 50%;
            margin-left: -20px;
            top: 50%;
            margin-top: -20px;
            position: absolute;
            z-index: 19 !important;
            animation: loading-spinner 400ms linear infinite;
        }

        #loading-spinner.spinner .spinner-icon {
            width: 40px;
            height: 40px;
            border:  solid 4px transparent;
            border-top-color:  #337ab7 !important;
            border-left-color: #337ab7 !important;
            border-radius: 50%;
        }

        @keyframes loading-spinner {
            0%   { transform: rotate(0deg);   transform: rotate(0deg); }
            100% { transform: rotate(360deg); transform: rotate(360deg); }
        }
    </style>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/es5-shim/4.5.7/es5-shim.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.0/jszip.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.0/xlsx.js"></script>

    <script type="text/javascript">

        var parentId = '{!JSENCODE(IdColl)}';
        var j$ = jQuery.noConflict();
        j$(document).ready
        (
            function() 
            {
                //Event listener for click of Upload button
                j$("#uploadButton").click(function()
                {
                    prepareFileUploads();
                });
                
                j$("#uploadBtn").click(function()
                {
                    document.getElementById("loading-spinner-wrapper").classList.add("loading-spinner-background");
                    document.getElementById("loading-spinner").classList.add("spinner");
                    checkForUploads();
                });

                
                //Event listener to clear upload details/status bars once upload is complete
                j$("#clear").on('click',function()
                {
                    j$(".upload").remove();
                    j$(".upload_complete").remove();
                });
            }
        );

        var byteChunkArray; 
        var files;
        var currentFile;
        var $upload;
        //var CHUNK_SIZE = 180000; //Must be evenly divisible by 3, if not, data corruption will occur
        var CHUNK_SIZE = 738000; //Must be evenly divisible by 3, if not, data corruption will occur
        var VIEW_URL = '/servlet/servlet.FileDownload?file=';
        //var parentId, you will see this variable used below but it is set in the component as this is a dynamic value passed in by component attribute

        //DnD inizio
        var bDND = false;

        function handleFileSelect(evt) 
        {
            //alert("Drop");
            evt.stopPropagation();
            evt.preventDefault();

            files = evt.dataTransfer.files; // FileList object.
            bDND = true;
            prepareFileUploads();
        }

        function errorHandler(evt)
        {
            alert("Error");
            if (evt.target.error.name == "NotReadableError")
            {
                document.getElementById('alert').innerHTML = 'The file could not be read.';
            }
            else
            {
                document.getElementById('alert').innerHTML = 'File error.';
            }      
        }
        //DnD fine

        function handleDragOver(evt)
        {
            evt.stopPropagation();
            evt.preventDefault();
            evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
        }

        //Executes when start Upload button is selected
        function prepareFileUploads()
        {
            //Get the file(s) from the input field
            //alert(bDND);
            
            if(!bDND)
                files = document.getElementById('filesInput').files;
            
            //alert('# Files: ' + files.length);
            
            //Only proceed if there are files selected
            if(files.length == 0){
                    alert('Please select a file!');
                    return; //end function
            }
            
            /* original code commented by MSALA
            //Disable inputs and buttons during the upload process
            j$(".uploadBox input").attr("disabled", "disabled");
            j$(".uploadBox button").attr({
                    disabled: "disabled",
                    class: "btnDisabled"
            });*/

            //Build out the upload divs for each file selected
            var uploadMarkup = '';
            for(i = 0; i < files.length; i++){
                //Determine file display size
                if(files[i].size < 1000000)
                {
                    var displaySize = Math.floor(files[i].size/1000) + 'K';
                }
                else
                {
                    var displaySize  = Math.round((files[i].size / 1000000)*10)/10 + 'MB';
                }
                
                //For each file being uploaded create a div to represent that file, includes file size, status bar, etc. data-Status tracks status of upload
                uploadMarkup += '<div class="upload" data-status="pending" data-index="'+i+'">'; //index used to correspond these upload boxes to records in the files array
                uploadMarkup += '<div class="fileName"><span class="name">'+ files[i].name + '</span> - '+ displaySize+ '</div>';
                uploadMarkup += '<div class="percentComplete">0%</div>'
                uploadMarkup += '<div class="clear"/>';
                uploadMarkup += '<div class="statusBar">';
                uploadMarkup += '<div class="statusBarPercent"/>';
                uploadMarkup += '</div>';
                uploadMarkup += '</div>';
            }
            
            //Add markup to the upload box
            j$('.uploadBox').append(uploadMarkup);
            
            //Once elements have been added to the page representing the uploads, start the actual upload process
            //checkForUploads();
        }

        function checkForUploads()
        {
            //Get div of the first matching upload element that is 'pending', if none, all uploads are complete
            $upload = j$(".upload:first[data-status='pending']");
            //alert("OK1");

            if($upload.length != 0)
            {
                //Disable inputs and buttons during the upload process
                j$(".uploadBox input").attr("disabled", "disabled");
                j$(".uploadBox button").attr({
                        disabled: "disabled",
                        class: "btnDisabled"
                });

                j$("#chooseCollector select").prop("disabled", true);

                //alert("OK2");
                //Based on index of the div, get correct file from files array
                currentFile = files[$upload.attr('data-index')];
                fName = files[$upload.attr('data-index')].name;
                
                /*Build the byteChunkArray array for the current file we are processing. This array is formatted as:
                ['0-179999','180000-359999',etc] and represents the chunks of bytes that will be uploaded individually.*/
                byteChunkArray = new Array();  
                
                //First check to see if file size is less than the chunk size, if so first and only chunk is entire size of file
                if(currentFile.size <= CHUNK_SIZE)
                {
                    byteChunkArray[0] = '0-' + (currentFile.size - 1);
                }
                else
                {
                    //Determine how many whole byte chunks make up the file,
                    var numOfFullChunks = Math.floor(currentFile.size / CHUNK_SIZE); //i.e. 1.2MB file would be 1000000 / CHUNK_SIZE
                    var remainderBytes = currentFile.size % CHUNK_SIZE; // would determine remainder of 1200000 bytes that is not a full chunk
                    var startByte = 0;
                    var endByte = CHUNK_SIZE - 1;
                    
                    //Loop through the number of full chunks and build the byteChunkArray array
                    for(i = 0; i < numOfFullChunks; i++){
                        byteChunkArray[i] = startByte+'-'+endByte;
                        
                        //Set new start and stop bytes for next iteration of loop
                        startByte = endByte + 1;
                        endByte += CHUNK_SIZE;
                    }
                    
                    //Add the last chunk of remaining bytes to the byteChunkArray
                    startByte = currentFile.size - remainderBytes;
                    endByte = currentFile.size;
                    byteChunkArray.push(startByte+'-'+endByte);
                }
                
                //Start processing the byteChunkArray for the current file, parameter is '' because this is the first chunk being uploaded and there is no attachment Id
                processByteChunkArray('');
                //alert("OK3");            
            }
            else
            {
                //alert("OK4");
                //All uploads completed, enable the input and buttons
                j$(".uploadBox input").removeAttr("disabled");
                j$(".uploadBox button").removeAttr("disabled").attr("class","btn");
                
                /*Remove the browse input element and replace it, this essentially removes
                the selected files and helps prevent duplicate uploads*/
                j$("#filesInput").replaceWith('<input type="file" name="file" multiple="true" id="filesInput">');

                document.getElementById("loading-spinner-wrapper").classList.remove("loading-spinner-background");
                document.getElementById("loading-spinner").classList.remove("spinner");
            }
        }

        //Uploads a chunk of bytes, if attachmentId is passed in it will attach the bytes to an existing attachment record
        function processByteChunkArray(attachmentId)
        {
            //Proceed if there are still values in the byteChunkArray, if none, all piece of the file have been uploaded
            //alert("OK5");
            if(byteChunkArray.length > 0)
            {
                //alert("OK6");
                //Determine the byte range that needs to uploaded, if byteChunkArray is like... ['0-179999','180000-359999']
                var indexes = byteChunkArray[0].split('-'); //... get the first index range '0-179999' -> ['0','179999']
                var startByte = parseInt(indexes[0]); //0
                var stopByte = parseInt(indexes[1]); //179999
                
                //Slice the part of the file we want to upload, currentFile variable is set in checkForUploads() method that is called before this method
                if(currentFile.webkitSlice){
                    //alert("OK6.1");
                    var blobChunk = currentFile.webkitSlice(startByte , stopByte + 1);
                }else if (currentFile.mozSlice) {
                    //alert("OK6.2");
                    var blobChunk = currentFile.mozSlice(startByte , stopByte + 1);
                }
                else
                {
                    //alert("OK6.3");
                    var blobChunk = currentFile.slice(startByte , stopByte + 1);
                }
                
                //Create a new reader object, part of HTML5 File API
                var reader = new FileReader();
                //alert("OK6.4");
                //Read the blobChunk as a binary string, reader.onloadend function below is automatically called after this line
                reader.readAsBinaryString(blobChunk);
                //reader.readAsArrayBuffer(blobChunk);
                //alert("OK6.5");
                //Create a reader.onload function, this will execute immediately after reader.readAsBinaryString() function above;
                reader.onloadend = function(evt)
                {
                    //alert("OK7");
                    if(evt.target.readyState == FileReader.DONE)
                    { //Make sure read was successful, DONE == 2
                        //Base 64 encode the data for transmission to the server with JS remoting, window.btoa currently on support by some browsers
                        var base64value = window.btoa(evt.target.result);
                        //alert(base64value);
                        //Use js remoting to send the base64 encoded chunk for uploading
                        try
                        {
                            CRABB_DEV.FileEsitiUploadController.attachBlob(
                                parentId,
                                attachmentId,
                                currentFile.name,
                                currentFile.type,
                                base64value,
                                function(result,event)
                                {
                                    //alert("OK9");
                                    //Proceed if there were no errors with the remoting call
                                    if(event.status == true)
                                    {
                                        //alert("OK9");
                                        //Update the percent of the status bar and percent, first determine percent complete
                                        var percentComplete = Math.round((stopByte / currentFile.size) * 100);
                                        $upload.find(".percentComplete").text(percentComplete + '%');
                                        $upload.find(".statusBarPercent").css('width',percentComplete + '%');
                                        
                                        //Remove the index information from the byteChunkArray array for the piece just uploaded.
                                        byteChunkArray.shift(); //removes 0 index
                                        
                                        //Set the attachmentId of the file we are now processing
                                        attachmentId = result;
                                                                                
                                        //Call process byteChunkArray to upload the next piece of the file
                                        processByteChunkArray(attachmentId);
                                    }
                                    else
                                    {
                                        //alert("OK10");
                                        //If script is here something broke on the JavasSript remoting call
                                        //Add classes to reflect error
                                        $upload.attr('data-status','complete');
                                        $upload.addClass('uploadError');
                                        $upload.find(".statusPercent").addClass('statusPercentError');
                                        $upload.attr('title',event.message);
                                        
                                        //Check and continue the next file to upload
                                        checkForUploads();
                                    }
                                }, 
                                {escape:true}
                            );
                            // console.log('OK1');
                            // var data = evt.target.result;
                            // console.log('OK2' + data);
                            // var arr = fixdata(data);
                            // console.log('OK3' + arr);
                            //var wb = X.read(btoa(arr), {type: 'base64'});
                            var wb = X.read(base64value, {type: 'base64'});
                            console.log('OK4'+base64value);
                            process_wb(wb);
                            console.log('OK5' + document.getElementById('out').innerText);
                            passStringToUploadDataTosObject(document.getElementById('out').innerText,fName);
                            //reader.readAsArrayBuffer(f);
                        }
                        catch(err)
                        {
                            txt="There was an error on this page.\n\n";
                            txt+="Error description: " + err.message + "\n\n";
                            txt+="Click OK to continue.\n\n";
                            alert(txt);
                        }
                        //alert("OK11");
                    }
                    else
                    {
                        //Error handling for bad read
                        alert('Could not read file');
                    }
                };          
            }
            else
            {
                //This file has completed, all byte chunks have been uploaded, set status on the div to complete
                $upload.attr('data-status','complete');
                $upload.attr('class','upload_complete');
                
                //Change name of file to link of uploaded attachment
                $upload.find(".name").html('<a href="' + VIEW_URL + attachmentId + '" target="_blank">'+currentFile.name+'</a>');
                
                
                //Call the checkForUploads to find the next upload div that has data-status="incomplete" and start the upload process. 
                checkForUploads();
            }
        }

        /*** LETTURA XLS ***/
        var X = XLSX;
        var fName;
        
        function fixdata(data) {
            var o = "", l = 0, w = 10240;
            for(; l<data.byteLength/w; ++l) o+=String.fromCharCode.apply(null,new Uint8Array(data.slice(l*w,l*w+w)));
            o+=String.fromCharCode.apply(null, new Uint8Array(data.slice(l*w)));
            return o;
        }
        
        function get_radio_value( radioName ) {
            var radios = document.getElementsByName( radioName );
            for( var i = 0; i < radios.length; i++ ) {
                if( radios[i].checked || radios.length === 1 ) {
                    return radios[i].value;
                }
            }
        }
        
        function to_json(workbook) {
            var result = {};
            workbook.SheetNames.forEach(function(sheetName) {
                var roa = X.utils.sheet_to_row_object_array(workbook.Sheets[sheetName]);
                if(roa.length > 0){
                    result[sheetName] = roa;
                }
            });
            return result;
        }
        
        function to_csv(workbook) {
            var result = [];
            workbook.SheetNames.forEach(function(sheetName) {
                var csv = X.utils.sheet_to_csv(workbook.Sheets[sheetName]);
                if(csv.length > 0){
                    result.push("SHEET: " + sheetName);
                    result.push("");
                    result.push(csv);
                }
            });
            return result.join("\n");
        }
        
        function to_formulae(workbook) {
            var result = [];
            workbook.SheetNames.forEach(function(sheetName) {
                var formulae = X.utils.get_formulae(workbook.Sheets[sheetName]);
                if(formulae.length > 0){
                    result.push("SHEET: " + sheetName);
                    result.push("");
                    result.push(formulae.join("\n"));
                }
            });
            return result.join("\n");
        }
        
        function process_wb(wb) {
            var output = "";
            var s = "";
            // switch(get_radio_value("format")) {
            //     case "json":
            //         output = JSON.stringify(to_json(wb), 2, 2);
            //         s = fName + " ready to be uploaded. Start Import to proceed.";
            //         break;
            //     case "form":
            //         output = to_formulae(wb);
            //         break;
            //     default:
            //         output = to_csv(wb);
            // }
            output = JSON.stringify(to_json(wb), 2, 2);
            s = fName + " ready to be uploaded. Start Import to proceed.";
            console.log('output: ' + output);
                
            if(out.innerText === undefined) out.textContent = output;
                else out.innerText = output;
            if(messageOut.innerText === undefined) messageOut.textContent = s;
                else messageOut.innerText = s;
            
            if(typeof console !== 'undefined') console.log("output", new Date());
        }
        
        function initiateInsertion()
        {
            passStringToUploadDataTosObject(document.getElementById('out').innerText,fName);
        }


    </script>

    <c:KillerStyle />
    <div class="row">
        <div class="col-md-6">
            <h2>
                <span class="bi bi-list-task warning">&nbsp;</span>Collector Outcome Import<br/>
<!--                <small>You can import up to <span class="label label-primary">10,000</span> records at a time.</small>-->
            </h2>
        </div>
        <div class="col-md-6">
            <div class="pull-right">
            </div>
        </div>
    </div>
    <hr/>
    <apex:pageBlock >
        <apex:facet name="header">
            <apex:form >
                <div class="panel panel-primary">
                    <div class="panel-heading"> {!$Label.CRABB_DEV__Inserimento_Esiti}
                        <div id="chooseCollector" style="display: inline;color: black;">
                            <apex:selectList id="chooseCollectorDropdown" value="{!IdColl}" size="1" disabled="{!currentStep = '2' || collectorItems.size < 2}">
                                <apex:selectOptions value="{!collectorItems}"/>
                                <apex:actionSupport event="onchange"/>
                            </apex:selectList>
                        </div>
                    </div>
                </div>
            </apex:form>
        </apex:facet>
        <div class="custom-container">
            <apex:form id="formid">
                <apex:outputPanel rendered="{!currentStep = '2'}">
                    <apex:outputPanel layout="none" rendered="{!batchRunning}" id="batchid">
                        <apex:pageMessage summary="Elaborazione in corso, potrebbe volerci un po', attendi e ricarica la pagina utilizzando il pulsante Refresh."
                                severity="info" strength="3"/>
                        <br/>
                        <center>
                            <apex:commandButton value="Refresh" styleClass="btn btn-primary" action="{!empty}"/>
                        </center>
                        <br/>
                        <div class="table-responsive">
                            <table class="table" id="tab_logic">
                                <thead>
                                <tr align="center">
                                    <th><i>{!$Label.CRABB_DEV__TotalBatch}</i></th>
                                    <th><i>{!$Label.CRABB_DEV__ProcessedBatch} </i></th>
                                    <th><i>Batch {!$Label.CRABB_DEV__Status}</i></th>
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                    <td>
                                        {!aaj.TotalJobItems}
                                    </td>
                                    <td>
                                        {!aaj.JobItemsProcessed}
                                    </td>
                                    <td>
                                        {!aaj.Status}
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                        </div>
                    </apex:outputPanel>

                    <apex:outputPanel layout="none" rendered="{!!batchRunning}">
                        <apex:pageMessage summary="{!$Label.CRABB_DEV__EndActivity} {!praticheOK} per {!praticheTotal} " severity="info" strength="3"/>

                        <div style="text-align:center; padding-top: 1em;">
                            <apex:outputLink value="{!URLFOR($Action.Attachment.Download, resultCsvId)}">Click for details</apex:outputLink>
                        </div>

                        <div style="text-align:center; padding-top: 1em;">
                            <apex:outputLink value="{!URLFOR($Action.Collector__c.View, IdColl)}">Go to collector</apex:outputLink>
                        </div>

                        <!-- <div align="center">
                            <apex:commandButton value="Indietro" action="{!backTo}" rendered="{!currentStep = '2'}" id="indietronew" styleClass="btn btn-primary"/>
                            &nbsp;
                            <apex:commandButton value="HomePage" action="{!homePage}" rendered="{!currentStep = '2'}" id="homepagenew" styleClass="btn btn-primary"/>
                        </div> -->
                    </apex:outputPanel>
                </apex:outputPanel>

                <div class="uploadBox">
                    <apex:outputPanel rendered="{!currentStep <> '2'}">
                        <div id="upl" class="drop" ondrop="handleFileSelect(event);"
                             ondragover="handleDragOver(event);">
                             {!$Label.Drag_Documents}
                        </div>
                        <div class="crabbpackage">
                            <apex:outputPanel id="PanelUpload">
                                <input id="uploadBtn" type="button" title="Upload" Class="btn btn-primary btn-xs btnCustom" value=" Upload "/>
                                <input id="clear" type="button" title="Clear" Class="btn btn-primary btn-xs btnCustom" value=" Clear "/>
                            </apex:outputPanel>
                        </div>
                        <div class="panel-body">
                            <pre id="messageOut">
                            </pre>
                        </div>
                        <div style="display: none;" class="panel-body">
                            <pre id="out">
                            </pre>
                        </div>

                        <div id="loading-spinner-wrapper">
                            <div id="loading-spinner">
                                <div class="spinner-icon"></div>
                            </div>
                        </div>
                        
                    </apex:outputPanel>
                </div>
            </apex:form>
        </div>
        <apex:form >
            <apex:actionFunction name="passStringToUploadDataTosObject" action="{!parseData}" rerender="output123,formid,uploadBox">
                <apex:param name="data" value="" assignTo="{!myString}"/>
                <apex:param name="name" value="" assignTo="{!fName}"/>
            </apex:actionFunction>
        </apex:form>
    </apex:pageBlock>

</apex:page>